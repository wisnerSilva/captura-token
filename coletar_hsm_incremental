import os
import uuid
import requests
from datetime import datetime, timezone
from selenium import webdriver
from selenium.webdriver.common.by import By
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.support.ui import WebDriverWait
from selenium.webdriver.support import expected_conditions as EC
from webdriver_manager.chrome import ChromeDriverManager
from supabase import create_client, Client

# ===============================
# VARI√ÅVEIS DE AMBIENTE
# ===============================
EMAIL = os.getenv("EMAIL_HIPLAT")
SENHA = os.getenv("SENHA_HIPLAT")
RELATORIO_URL = os.getenv("RELATORIO_URL")

SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_SERVICE_KEY = os.getenv("SUPABASE_SERVICE_KEY")
TABLE_NAME = "public.hiplatform_tokens"
BUCKET_NAME = "hiplatform_tokens"

# ===============================
# CLIENTES
# ===============================
supabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)

headers = {
    "apikey": SUPABASE_SERVICE_KEY,
    "Authorization": f"Bearer {SUPABASE_SERVICE_KEY}"
}

# ===============================
# COLETA DE TOKEN
# ===============================
def iniciar_driver():
    options = webdriver.ChromeOptions()
    options.add_argument('--no-sandbox')
    options.add_argument('--disable-dev-shm-usage')
    options.add_argument('--disable-blink-features=AutomationControlled')
    options.add_argument('--headless')
    return webdriver.Chrome(
        service=Service(ChromeDriverManager().install()),
        options=options
    )

def fazer_login(driver, email, senha, timeout=20):
    wait = WebDriverWait(driver, timeout)
    driver.get("https://horus.hiplatform.com/")
    print("üöÄ Acessando p√°gina de login...")
    try:
        btn = wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@value='Continuar']")))
        btn.click()
        print("‚úÖ CONTINUAR clicado")
    except:
        print("‚ö†Ô∏è CONTINUAR n√£o encontrado ‚Äî pulando")
    inp = wait.until(EC.presence_of_element_located((By.ID, "login_login")))
    inp.clear(); inp.send_keys(email)
    pwd = wait.until(EC.presence_of_element_located((By.ID, "login_password")))
    pwd.clear(); pwd.send_keys(senha)
    ok = wait.until(EC.element_to_be_clickable((By.XPATH, "//input[@value='Entrar' and not(@disabled)]")))
    ok.click()
    print("‚úÖ ENTRAR clicado")
    wait.until(EC.url_contains("/products"))
    print("‚úÖ Login bem-sucedido")

def coletar_token(email, senha, url, max_wait=60):
    driver = iniciar_driver()
    try:
        fazer_login(driver, email, senha)
        driver.get(url)
        print("üöÄ Acessando relat√≥rio")
        wait = WebDriverWait(driver, max_wait)
        token = wait.until(lambda d: d.execute_script(
            "return window.localStorage.getItem('dt.admin.token');"
        ))
        print("‚úÖ TOKEN ENCONTRADO:", token)
        return token
    except Exception as e:
        print("‚ùå Erro ao coletar token:", e)
        return None
    finally:
        driver.quit()
        print("üåê Navegador fechado")

# ===============================
# SUPABASE STORAGE & TABELA
# ===============================
def criar_bucket_se_nao_existir():
    url = f"{SUPABASE_URL}/storage/v1/bucket"
    body = {"name": BUCKET_NAME, "public": False}
    response = requests.post(url, headers=headers, json=body)
    if response.status_code == 200:
        print("‚úÖ Bucket criado com sucesso.")
    elif response.status_code == 400 and "already exists" in response.text:
        print("‚ÑπÔ∏è Bucket j√° existe.")
    else:
        print(f"‚ö†Ô∏è Erro ao criar bucket: {response.status_code} - {response.text}")

def salvar_token_no_bucket(token):
    criar_bucket_se_nao_existir()
    timestamp = datetime.now().strftime("%Y-%m-%d_%H-%M-%S")
    file_name = f"{timestamp}.txt"
    upload_url = f"{SUPABASE_URL}/storage/v1/object/{BUCKET_NAME}/{file_name}"
    upload_headers = headers.copy()
    upload_headers["Content-Type"] = "text/plain"
    response = requests.post(upload_url, headers=upload_headers, data=token.encode("utf-8"))
    if response.status_code in [200, 201]:
        print(f"‚úÖ Token salvo no bucket como '{file_name}'")
    else:
        print(f"‚ùå Falha ao salvar token: {response.status_code} - {response.text}")

def salvar_token_na_tabela(token: str):
    print("üìÑ Salvando token na tabela...")
    now = datetime.now(timezone.utc).isoformat()
    dados = {"token": token, "created_at": now}
    response = supabase.table(TABLE_NAME).insert(dados).execute()
    if hasattr(response, 'error') and response.error:
        print("‚ùå Erro ao inserir na tabela:", response.error.message)
    else:
        print("‚úÖ Token salvo na tabela com sucesso.")

# ===============================
# FLUXO PRINCIPAL
# ===============================
if __name__ == "__main__":
    token = coletar_token(EMAIL, SENHA, RELATORIO_URL)
    if token:
        salvar_token_no_bucket(token)
        salvar_token_na_tabela(token)
    else:
        print("‚ùå Token n√£o coletado.")

# ============================================
# üö´üö´üö´ NUNCA ALTERAR O C√ìDIGO ACIMA DESTA LINHA üö´üö´üö´
# C√≥digo original do coletor de token - protegido conforme instru√ß√£o
# ============================================

import os
import uuid
import requests
import pandas as pd
from io import StringIO
from datetime import datetime, timedelta, timezone
from supabase import create_client, Client
from coletar_token import coletar_token  # Importa a fun√ß√£o do seu c√≥digo anterior

# ===============================
# VARI√ÅVEIS DE AMBIENTE
# ===============================
SUPABASE_URL = os.getenv("SUPABASE_URL")
SUPABASE_SERVICE_KEY = os.getenv("SUPABASE_KEY")
TABLE_HSM = "hsm_mensagens"
TABLE_LOG = "hsm_logs"
EMAIL = os.getenv("EMAIL_HIPLAT")
SENHA = os.getenv("SENHA_HIPLAT")
RELATORIO_URL = os.getenv("RELATORIO_URL")

# ===============================
# SUPABASE CLIENT
# ===============================
supabase: Client = create_client(SUPABASE_URL, SUPABASE_SERVICE_KEY)

# ===============================
# CONFIGURA√á√ïES DA API
# ===============================
API_URL = "https://whatsapp-connect.hiplatform.com/hsmservices/api/Hsm/ExportHsm"
TENANT_ID = "762b7805-51fc-4e84-a614-4eb2b5d4eb16"
REPROCESS_DIAS = 3

# ===============================
# FUN√á√ïES DE LOG E MANIPULA√á√ÉO
# ===============================
def registrar_log(data, mensagem):
    log = {
        "id": str(uuid.uuid4()),
        "data": data.isoformat(),
        "mensagem": mensagem,
        "created_at": datetime.utcnow().isoformat()
    }
    supabase.table(TABLE_LOG).insert(log).execute()

def obter_ultima_data():
    query = f"SELECT MAX(data_hora_disparo) as max_data FROM {TABLE_HSM};"
    resultado = supabase.rpc("execute_sql", {"sql": query}).execute()
    if resultado.data and resultado.data[0]['max_data']:
        return datetime.fromisoformat(resultado.data[0]['max_data']).date() - timedelta(days=REPROCESS_DIAS)
    return datetime(2024, 9, 1).date()

def validar_e_normalizar_colunas(df):
    colunas_existentes = supabase.table(TABLE_HSM).select("*").limit(1).execute().data
    if not colunas_existentes:
        return df
    colunas_db = set(colunas_existentes[0].keys())
    for coluna in df.columns:
        if coluna not in colunas_db:
            try:
                tipo = "text"
                alterar_sql = f"ALTER TABLE {TABLE_HSM} ADD COLUMN \"{coluna}\" {tipo};"
                supabase.rpc("execute_sql", {"sql": alterar_sql}).execute()
                print(f"üîé Nova coluna adicionada: {coluna}")
            except Exception as e:
                print(f"‚ö†Ô∏è Erro ao adicionar coluna {coluna}: {e}")
    return df

def coletar_e_inserir(token: str, data: datetime):
    start = datetime.combine(data, datetime.min.time())
    end = datetime.combine(data, datetime.max.time())
    payload = {
        "startDate": start.strftime("%Y-%m-%dT%H:%M:%S-03:00"),
        "endDate": end.strftime("%Y-%m-%dT%H:%M:%S-03:00"),
        "origin": 0,
        "senders": [],
        "categories": [],
        "tenantId": TENANT_ID
    }
    headers = {
        "Authorization": f"DT-Fenix-Token {token}",
        "Content-Type": "application/json",
        "Accept": "text/csv"
    }
    print(f"üóìÔ∏è Coletando dados para: {data}")
    try:
        response = requests.post(API_URL, headers=headers, json=payload, timeout=60)
        response.raise_for_status()
        df = pd.read_csv(StringIO(response.content.decode("utf-16-le")), sep=";")
        if df.empty:
            print(f"‚ö†Ô∏è Nenhum dado para {data}")
            return
        df = validar_e_normalizar_colunas(df)
        delete_sql = f"DELETE FROM {TABLE_HSM} WHERE DATE(data_hora_disparo) = '{data}';"
        supabase.rpc("execute_sql", {"sql": delete_sql}).execute()
        for _, row in df.iterrows():
            dados = row.to_dict()
            dados['id'] = str(uuid.uuid4())
            dados['created_at'] = datetime.utcnow().isoformat()
            dados['updated_at'] = None
            supabase.table(TABLE_HSM).insert(dados).execute()
        print(f"‚úÖ {len(df)} registros inseridos para {data}")
    except Exception as e:
        print(f"‚ùå Erro ao inserir dados de {data}: {e}")
        registrar_log(data, str(e))

if __name__ == "__main__":
    token = coletar_token(EMAIL, SENHA, RELATORIO_URL)
    if token:
        print(f"üìú Token usado na coleta HSM: {token}")

        # ==== OP√á√ÉO 1: CARGA INCREMENTAL ====
        data_inicio = obter_ultima_data()
        data_fim = datetime.now().date()

        # ==== OP√á√ÉO 2: CARGA FULL ====
        # data_inicio = datetime(2024, 9, 1).date()
        # data_fim = datetime.now().date()

        data_atual = data_inicio
        while data_atual <= data_fim:
            coletar_e_inserir(token, data_atual)
            data_atual += timedelta(days=1)
        print("üéâ Coleta finalizada!")
    else:
        print("‚ùå Token n√£o coletado. Encerrando fluxo.")


